{"version":3,"sources":["components/Intro/Intro.jsx","components/Hello/Hello.jsx","components/About/About.jsx","components/Content/Content.jsx","App.js","serviceWorker.js","index.js"],"names":["Intro","Fragment","className","ButtonGroup","Button","target","href","Hello","Row","style","width","Col","md","overflowX","x","About","size","Content","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qXAiBeA,EAZD,kBACV,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,WACX,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,OAAO,SAASC,KAAK,gEAA7B,OACA,kBAACF,EAAA,EAAD,CAAQC,OAAO,SAASC,KAAK,qDAA7B,iBAGR,yBAAKJ,UAAU,W,wCCgCRK,EAtCD,kBAEV,kBAAC,IAAMN,SAAP,KACI,kBAACO,EAAA,EAAD,CAAKC,MAAS,CAACC,MAAO,SAClB,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,yBAAKH,MAAO,CAAEC,MAAO,OAAQG,UAAW,WACpC,kBAAC,IAAD,KACI,kBAAC,WAAD,CAAUC,EAAG,EAAE,GAAI,MACf,yBAAKZ,UAAU,cAM/B,kBAACS,EAAA,EAAD,CAAKC,GAAG,KACJ,yBAAKH,MAAO,CAAEC,MAAO,OAAQG,UAAW,WACpC,kBAAC,IAAD,KACI,0BAAMX,UAAU,QACZ,kBAAC,WAAD,CAAUY,EAAG,CAAC,IAAK,MACf,wBAAIZ,UAAU,YAAd,qC,QCwEjBa,G,MAxFD,kBAEV,kBAAC,IAAMd,SAAP,KAEI,kBAACO,EAAA,EAAD,CAAKC,MAAS,CAACC,MAAO,SAClB,yBAAKR,UAAU,WAInB,kBAACM,EAAA,EAAD,CAAKC,MAAS,CAACC,MAAO,SAClB,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACR,kBAACD,EAAA,EAAD,CAAKC,GAAG,KACJ,yBAAKH,MAAO,CAAEC,MAAO,OAAQG,UAAW,WACpC,kBAAC,IAAD,KACI,kBAAC,WAAD,CAAUC,EAAG,EAAE,GAAI,KACf,wBAAIZ,UAAU,eAAd,4BAKhB,kBAACS,EAAA,EAAD,CAAKC,GAAG,OAEZ,kBAACJ,EAAA,EAAD,CAAKC,MAAS,CAACC,MAAO,SAClB,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,yBAAKH,MAAO,CAAEC,MAAO,OAAQG,UAAW,WACpC,kBAAC,IAAD,KACI,0BAAMX,UAAU,QAEZ,kBAAC,WAAD,CAAUY,EAAG,CAAC,IAAK,IACf,uBAAGZ,UAAU,QAAb,wBACqB,6BACjB,mCAQxB,kBAACS,EAAA,EAAD,CAAKC,GAAG,KACJ,yBAAKH,MAAO,CAAEC,MAAO,OAAQG,UAAW,WACpC,kBAAC,IAAD,KACI,0BAAMX,UAAU,QACZ,kBAAC,WAAD,CAAUY,EAAG,EAAE,GAAI,IACf,wBAAIZ,UAAU,QAAd,2BAGA,6BAOhC,uBAAGG,OAAO,SAASC,KAAK,gEACY,kBAAC,IAAD,CAAkBJ,UAAW,OAAOc,KAAM,YActE,kBAACR,EAAA,EAAD,KACI,yBAAKN,UAAU,cCxENe,G,uLAGb,OACI,yBAAKf,UAAU,QACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAPqBgB,cCJhBC,E,iLAEjB,OACE,kBAAC,mBAAD,KACE,kBAAC,EAAD,W,GAJyBD,aCQbE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d681eff5.chunk.js","sourcesContent":["import React from 'react';\nimport './Intro.scss';\nimport { Button, ButtonGroup } from 'reactstrap';\n\n\nconst Intro = () => (\n    <React.Fragment>\n        <div className=\"buttons\">\n            <ButtonGroup>\n                <Button target=\"_blank\" href=\"https://www.facebook.com/events/197719935560769?ref=newsfeed\">P2C</Button>\n                <Button target=\"_blank\" href=\"https://github.com/ethanwarnar/code-with-p2c-demo\">Source Code</Button>\n            </ButtonGroup>\n        </div>\n        <div className=\"main\"/>\n    </React.Fragment>\n);\n\nexport default Intro;","import React from 'react';\nimport './Hello.scss';\nimport { Parallax } from 'react-scroll-parallax';\nimport { Col, Row } from 'reactstrap'\n// @ts-ignore\nimport Fade from 'react-reveal/Fade';\n\nconst Hello = () => (\n\n    <React.Fragment>\n        <Row style = {{width: '100%'}}>\n            <Col md=\"6\">\n                <div style={{ width: '100%', overflowX: 'hidden' }}>\n                    <Fade >\n                        <Parallax x={[-80, 100]}>\n                            <div className=\"image\" />\n                        </Parallax>\n                    </Fade>\n                </div>\n            </Col>\n\n            <Col md=\"6\">\n                <div style={{ width: '100%', overflowX: 'hidden' }}>\n                    <Fade >\n                        <main className=\"root\">\n                            <Parallax x={[80, -100]}>\n                                <h1 className=\"headline\">Build a personal website.</h1>\n                            </Parallax>\n                            {/* <Parallax x={[80, -80]}>\n                                <p className=\"text\">\n                                    React + github pages <br />\n                                    <br />\n                                </p>\n                            </Parallax> */}\n                        </main>\n                    </Fade>\n                </div>\n\n            </Col>\n        </Row>\n\n    </React.Fragment>\n\n);\n\nexport default Hello;\n","\nimport React, { Component } from 'react';\nimport Intro from '../Intro/Intro';\nimport { Col, Row } from 'reactstrap'\nimport Fade from 'react-reveal/Fade';\nimport { Parallax } from 'react-scroll-parallax';\nimport { FaFacebookSquare } from \"react-icons/fa\";\n\nimport './About.scss';\n\nconst About = () => (\n\n    <React.Fragment>\n\n        <Row style = {{width: '100%'}}>\n            <div className=\"space\">\n                {/* <h1>test</h1> */}\n            </div>\n        </Row>\n        <Row style = {{width: '100%'}}>\n            <Col md=\"2\" />\n            <Col md=\"8\" >\n                <div style={{ width: '100%', overflowX: 'hidden' }}>\n                    <Fade >\n                        <Parallax x={[-50, 50]}>\n                            <h1 className=\"banner_text\">React + github pages</h1>\n                        </Parallax>\n                    </Fade>\n                </div>\n            </Col >\n            <Col md=\"4\" />\n        </Row>\n        <Row style = {{width: '100%'}}>\n            <Col md=\"6\">\n                <div style={{ width: '100%', overflowX: 'hidden' }}>\n                    <Fade >\n                        <main className=\"root\">\n\n                            <Parallax x={[80, -0]}>\n                                <p className=\"text\">\n                                26-June-2021 | 2-4pm <br />\n                                    <br />\n                                    {/* I have a passion for solving problems, helping others, and watching the Leafs. */}\n                                    </p>\n                            </Parallax>\n                        </main>\n                    </Fade>\n                </div>\n            </Col>\n            <Col md=\"6\">\n                <div style={{ width: '100%', overflowX: 'hidden' }}>\n                    <Fade >\n                        <main className=\"root\">\n                            <Parallax x={[-80, 0]}>\n                                <h1 className=\"text\" >\n                                    RSVP to the event here. \n                                </h1>                                   \n                                <br />\n                                {/* <div style={{\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    flexWrap: 'wrap'\n                                }}> */}\n\n<a target=\"_blank\" href=\"https://www.facebook.com/events/197719935560769?ref=newsfeed\" >\n                                    <FaFacebookSquare className= \"icon\" size={70} /> \n                                </a>\n                                {/* </div> */}\n                            \n                            </Parallax>\n                        </main>\n                    </Fade>\n                </div>\n            </Col>\n\n\n\n        </Row>\n\n        <Row>\n            <div className=\"space\" >\n                {/* <h1 className=\"banner_text\">\n                    Here are some of the technologies and languages I have worked with.\n                </h1> */}\n            </div>\n        </Row>\n\n\n\n\n\n\n\n\n    </React.Fragment >\n\n);\n\nexport default About;\n","\nimport React, { Component } from 'react';\nimport Intro from '../Intro/Intro';\nimport Hello from '../Hello/Hello';\nimport About from '../About/About';\n\nimport './Content.scss';\n\nexport default class Content extends Component {\n\n    render() {\n        return (\n            <div className=\"blah\">\n                <Intro />\n                <Hello />\n                <About />\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { ParallaxProvider } from 'react-scroll-parallax';\nimport Content from './components/Content/Content.jsx';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <ParallaxProvider>\n        <Content />\n      </ParallaxProvider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}